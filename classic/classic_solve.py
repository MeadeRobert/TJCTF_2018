from Crypto.Util.number import *
import math

e = 65537L
n = 128299637852747781491257187842028484364103855748297296704808405762229741626342194440837748106022068295635777844830831811978557490708404900063082674039252789841829590381008343327258960595508204744589399243877556198799438322881052857422197506822302290812621883700357890208069551876513290323124813780520689585503L
c = 43160414063424128744492209010823042660025171642991046645158489731385945722740307002278661617111192557638773493117905684302084789590107080892369738949935010170735247383608959796206619491522997896941432858113478736544386518678449541064813172833593755715667806740002726487780692635238838746604939551393627585159L

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def isqrt(n):
  x = n
  y = (x + n // x) // 2
  while y < x:
    x = y
    y = (x + n // x) // 2
  return x

def fermat(n):
	a = isqrt(n)
	b2 = a*a - n
	b = isqrt(n)
	count = 0
	while b*b != b2:
		a += 1
		b2 = a*a - n
		b = isqrt(b2)
		count += 1
	p = a+b
	q = a-b
	return p,q
		
factors = fermat(n)
p = factors[0]
q = factors[1]
#print p,q

phi = (p - 1) * (q - 1)

d = egcd(e, phi)[1]
d = d if d > 0 else d + phi
#print d

m = pow(c, d, n)
#print m

# recompile flag into ascii text
flag = ""
while m > 0:
	flag = chr(m % 256) + flag
	m //= 256
print flag

